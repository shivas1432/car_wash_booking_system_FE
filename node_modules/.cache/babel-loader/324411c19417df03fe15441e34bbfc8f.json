{"ast":null,"code":"import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { queryDb } from '../config/db.js';\nconst router = express.Router();\nrouter.post('/', (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const normalizedUsername = username.toLowerCase();\n  const isEmail = normalizedUsername.includes('@');\n  const query = isEmail ? 'SELECT * FROM users WHERE email = ?' : 'SELECT * FROM users WHERE username = ?';\n  queryDb(query, [normalizedUsername], async (err, results) => {\n    if (err) {\n      return res.status(500).json({\n        message: 'Internal server error'\n      });\n    }\n    if (results.length === 0) {\n      return res.status(400).json({\n        message: 'User not found'\n      });\n    }\n    const user = results[0];\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: 'Invalid credentials'\n      });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign({\n      id: user.id,\n      username: user.username\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.json({\n      message: 'Login successful',\n      token\n    });\n  });\n});\nexport default router;","map":{"version":3,"names":["express","bcrypt","jwt","queryDb","router","Router","post","req","res","username","password","body","normalizedUsername","toLowerCase","isEmail","includes","query","err","results","status","json","message","length","user","isMatch","compare","token","sign","id","process","env","JWT_SECRET","expiresIn"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/components/Login.jsx"],"sourcesContent":["import express from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { queryDb } from '../config/db.js';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  const normalizedUsername = username.toLowerCase();\r\n  const isEmail = normalizedUsername.includes('@');\r\n\r\n  const query = isEmail\r\n    ? 'SELECT * FROM users WHERE email = ?'\r\n    : 'SELECT * FROM users WHERE username = ?';\r\n\r\n  queryDb(query, [normalizedUsername], async (err, results) => {\r\n    if (err) {\r\n      return res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      return res.status(400).json({ message: 'User not found' });\r\n    }\r\n\r\n    const user = results[0];\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign(\r\n      { id: user.id, username: user.username }, \r\n      process.env.JWT_SECRET, \r\n      { expiresIn: '1h' }\r\n    );\r\n\r\n    res.json({\r\n      message: 'Login successful',\r\n      token\r\n    });\r\n  });\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,MAAMC,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;AAE/BD,MAAM,CAACE,IAAI,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC7B,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEvC,MAAMC,kBAAkB,GAAGH,QAAQ,CAACI,WAAW,CAAC,CAAC;EACjD,MAAMC,OAAO,GAAGF,kBAAkB,CAACG,QAAQ,CAAC,GAAG,CAAC;EAEhD,MAAMC,KAAK,GAAGF,OAAO,GACjB,qCAAqC,GACrC,wCAAwC;EAE5CX,OAAO,CAACa,KAAK,EAAE,CAACJ,kBAAkB,CAAC,EAAE,OAAOK,GAAG,EAAEC,OAAO,KAAK;IAC3D,IAAID,GAAG,EAAE;MACP,OAAOT,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;IAEA,IAAIH,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;MACxB,OAAOd,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;IAEA,MAAME,IAAI,GAAGL,OAAO,CAAC,CAAC,CAAC;IACvB,MAAMM,OAAO,GAAG,MAAMvB,MAAM,CAACwB,OAAO,CAACf,QAAQ,EAAEa,IAAI,CAACb,QAAQ,CAAC;IAE7D,IAAI,CAACc,OAAO,EAAE;MACZ,OAAOhB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;;IAEA;IACA,MAAMK,KAAK,GAAGxB,GAAG,CAACyB,IAAI,CACpB;MAAEC,EAAE,EAAEL,IAAI,CAACK,EAAE;MAAEnB,QAAQ,EAAEc,IAAI,CAACd;IAAS,CAAC,EACxCoB,OAAO,CAACC,GAAG,CAACC,UAAU,EACtB;MAAEC,SAAS,EAAE;IAAK,CACpB,CAAC;IAEDxB,GAAG,CAACY,IAAI,CAAC;MACPC,OAAO,EAAE,kBAAkB;MAC3BK;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAetB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module"}