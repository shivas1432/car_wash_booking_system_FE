{"ast":null,"code":"import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken'; // Import jwt\nimport { queryDb } from '../config/db.js';\nconst router = express.Router();\n\n// JWT Secret key (store it in your .env file for security)\nconst JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key_12345';\n\n// Login route (modified to use JWT and fetch user details)\nrouter.post('/', (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const normalizedUsername = username.toLowerCase();\n  const isEmail = normalizedUsername.includes('@');\n  const query = isEmail ? 'SELECT * FROM users WHERE email = ?' : 'SELECT * FROM users WHERE username = ?';\n  queryDb(query, [normalizedUsername], async (err, results) => {\n    if (err) {\n      return res.status(500).json({\n        message: 'Internal server error'\n      });\n    }\n    if (results.length === 0) {\n      return res.status(400).json({\n        message: 'User not found'\n      });\n    }\n    const user = results[0];\n\n    // Compare the password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: 'Invalid credentials'\n      });\n    }\n\n    // Retrieve additional user information (e.g., reviews, cars, bookings)\n    const reviewsQuery = 'SELECT * FROM reviews WHERE user_id = ?';\n    const carsQuery = 'SELECT * FROM cars WHERE user_id = ?';\n    const bookingsQuery = 'SELECT * FROM booking WHERE user_id = ?';\n    try {\n      const [reviews, cars, bookings] = await Promise.all([queryDb(reviewsQuery, [user.id]), queryDb(carsQuery, [user.id]), queryDb(bookingsQuery, [user.id])]);\n\n      // Create a JWT token\n      const token = jwt.sign({\n        id: user.id,\n        username: user.username\n      }, JWT_SECRET,\n      // Secret key from the .env file\n      {\n        expiresIn: '1h'\n      } // Token expires in 1 hour\n      );\n\n      // Send the token and user data to the client\n      res.json({\n        message: 'Login successful',\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          phone_number: user.phone_number,\n          address: user.address,\n          profile_picture: user.profile_picture,\n          full_name: user.full_name,\n          created_at: user.created_at,\n          reviews,\n          cars,\n          bookings\n        }\n      });\n    } catch (err) {\n      res.status(500).json({\n        message: 'Error fetching additional user data'\n      });\n    }\n  });\n});\n\n// Profile endpoint to check if the user is logged in (using JWT)\nrouter.get('/profile', (req, res) => {\n  var _req$header;\n  const token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.split(' ')[1]; // Extract token from Authorization header\n\n  if (!token) {\n    return res.status(401).json({\n      message: 'No token provided'\n    });\n  }\n  try {\n    // Verify the token using the secret key\n    const decoded = jwt.verify(token, JWT_SECRET);\n\n    // Token is valid, send user data\n    res.json({\n      message: 'Authenticated',\n      user: decoded\n    });\n  } catch (err) {\n    res.status(401).json({\n      message: 'Invalid or expired token'\n    });\n  }\n});\n\n// Logout endpoint (optional with JWT - usually you just remove the token on the client side)\nrouter.post('/logout', (req, res) => {\n  // No server-side session to destroy with JWT\n  res.json({\n    message: 'Logged out successfully'\n  });\n});\nexport default router;","map":{"version":3,"names":["express","bcrypt","jwt","queryDb","router","Router","JWT_SECRET","process","env","post","req","res","username","password","body","normalizedUsername","toLowerCase","isEmail","includes","query","err","results","status","json","message","length","user","isMatch","compare","reviewsQuery","carsQuery","bookingsQuery","reviews","cars","bookings","Promise","all","id","token","sign","expiresIn","email","phone_number","address","profile_picture","full_name","created_at","get","_req$header","header","split","decoded","verify"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/components/Login.jsx"],"sourcesContent":["import express from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken'; // Import jwt\r\nimport { queryDb } from '../config/db.js';\r\n\r\nconst router = express.Router();\r\n\r\n// JWT Secret key (store it in your .env file for security)\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key_12345';\r\n\r\n// Login route (modified to use JWT and fetch user details)\r\nrouter.post('/', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  const normalizedUsername = username.toLowerCase();\r\n  const isEmail = normalizedUsername.includes('@');\r\n\r\n  const query = isEmail\r\n    ? 'SELECT * FROM users WHERE email = ?'\r\n    : 'SELECT * FROM users WHERE username = ?';\r\n\r\n  queryDb(query, [normalizedUsername], async (err, results) => {\r\n    if (err) {\r\n      return res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      return res.status(400).json({ message: 'User not found' });\r\n    }\r\n\r\n    const user = results[0];\r\n\r\n    // Compare the password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Retrieve additional user information (e.g., reviews, cars, bookings)\r\n    const reviewsQuery = 'SELECT * FROM reviews WHERE user_id = ?';\r\n    const carsQuery = 'SELECT * FROM cars WHERE user_id = ?';\r\n    const bookingsQuery = 'SELECT * FROM booking WHERE user_id = ?';\r\n\r\n    try {\r\n      const [reviews, cars, bookings] = await Promise.all([\r\n        queryDb(reviewsQuery, [user.id]),\r\n        queryDb(carsQuery, [user.id]),\r\n        queryDb(bookingsQuery, [user.id]),\r\n      ]);\r\n\r\n      // Create a JWT token\r\n      const token = jwt.sign(\r\n        { id: user.id, username: user.username },\r\n        JWT_SECRET, // Secret key from the .env file\r\n        { expiresIn: '1h' } // Token expires in 1 hour\r\n      );\r\n\r\n      // Send the token and user data to the client\r\n      res.json({\r\n        message: 'Login successful',\r\n        token,\r\n        user: {\r\n          id: user.id,\r\n          username: user.username,\r\n          email: user.email,\r\n          phone_number: user.phone_number,\r\n          address: user.address,\r\n          profile_picture: user.profile_picture,\r\n          full_name: user.full_name,\r\n          created_at: user.created_at,\r\n          reviews,\r\n          cars,\r\n          bookings,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({ message: 'Error fetching additional user data' });\r\n    }\r\n  });\r\n});\r\n\r\n// Profile endpoint to check if the user is logged in (using JWT)\r\nrouter.get('/profile', (req, res) => {\r\n  const token = req.header('Authorization')?.split(' ')[1]; // Extract token from Authorization header\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ message: 'No token provided' });\r\n  }\r\n\r\n  try {\r\n    // Verify the token using the secret key\r\n    const decoded = jwt.verify(token, JWT_SECRET);\r\n\r\n    // Token is valid, send user data\r\n    res.json({ message: 'Authenticated', user: decoded });\r\n  } catch (err) {\r\n    res.status(401).json({ message: 'Invalid or expired token' });\r\n  }\r\n});\r\n\r\n// Logout endpoint (optional with JWT - usually you just remove the token on the client side)\r\nrouter.post('/logout', (req, res) => {\r\n  // No server-side session to destroy with JWT\r\n  res.json({ message: 'Logged out successfully' });\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}