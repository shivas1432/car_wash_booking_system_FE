{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivashanker\\\\react\\\\car wash\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { Navigate, useLocation, useNavigate } from 'react-router-dom';\nimport UserContext from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children\n}) {\n  _s();\n  const {\n    userData,\n    loading,\n    logout\n  } = useContext(UserContext);\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Check for token expiration\n  useEffect(() => {\n    const checkTokenExpiration = () => {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n\n      // Check if token is expired\n      try {\n        // Get expiration from token without using jwt library\n        // (avoiding process.env in browser environment)\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const expiration = payload.exp * 1000; // Convert to milliseconds\n\n        if (Date.now() >= expiration) {\n          console.log(\"Token expired, logging out\");\n          logout();\n          navigate('/login', {\n            state: {\n              from: location.pathname,\n              message: \"Your session has expired. Please log in again.\"\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Error checking token expiration:\", error);\n        logout();\n      }\n    };\n\n    // Check on component mount\n    checkTokenExpiration();\n\n    // Set up interval to check periodically\n    const intervalId = setInterval(checkTokenExpiration, 60000); // Check every minute\n\n    return () => clearInterval(intervalId);\n  }, [logout, navigate, location.pathname]);\n\n  // Show loading indicator while checking authentication\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If not logged in, redirect to login page\n  if (!userData || !userData.id) {\n    // Redirect to login page with the return URL\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location.pathname\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If logged in, show the protected content\n  return children;\n}\n_s(ProtectedRoute, \"LINbgdnnj5GSsTl+3rPnCuu9DWg=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","useEffect","Navigate","useLocation","useNavigate","UserContext","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","userData","loading","logout","location","navigate","checkTokenExpiration","token","localStorage","getItem","payload","JSON","parse","atob","split","expiration","exp","Date","now","console","log","state","from","pathname","message","error","intervalId","setInterval","clearInterval","style","display","justifyContent","alignItems","height","fileName","_jsxFileName","lineNumber","columnNumber","id","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { Navigate, useLocation, useNavigate } from 'react-router-dom';\r\nimport UserContext from '../context/UserContext';\r\n\r\nexport default function ProtectedRoute({ children }) {\r\n  const { userData, loading, logout } = useContext(UserContext);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  // Check for token expiration\r\n  useEffect(() => {\r\n    const checkTokenExpiration = () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return;\r\n      \r\n      // Check if token is expired\r\n      try {\r\n        // Get expiration from token without using jwt library\r\n        // (avoiding process.env in browser environment)\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        const expiration = payload.exp * 1000; // Convert to milliseconds\r\n        \r\n        if (Date.now() >= expiration) {\r\n          console.log(\"Token expired, logging out\");\r\n          logout();\r\n          navigate('/login', { \r\n            state: { \r\n              from: location.pathname,\r\n              message: \"Your session has expired. Please log in again.\"\r\n            } \r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error checking token expiration:\", error);\r\n        logout();\r\n      }\r\n    };\r\n\r\n    // Check on component mount\r\n    checkTokenExpiration();\r\n    \r\n    // Set up interval to check periodically\r\n    const intervalId = setInterval(checkTokenExpiration, 60000); // Check every minute\r\n    \r\n    return () => clearInterval(intervalId);\r\n  }, [logout, navigate, location.pathname]);\r\n\r\n  // Show loading indicator while checking authentication\r\n  if (loading) {\r\n    return (\r\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n        <div>Loading...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If not logged in, redirect to login page\r\n  if (!userData || !userData.id) {\r\n    // Redirect to login page with the return URL\r\n    return <Navigate to=\"/login\" state={{ from: location.pathname }} replace />;\r\n  }\r\n\r\n  // If logged in, show the protected content\r\n  return children;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}