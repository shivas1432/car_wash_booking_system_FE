{"ast":null,"code":"// config/axios.js\n\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  // Make sure this matches your server URL\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Important for sessions/cookies if used\n});\n\n// Function to check if token is expired\nconst isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    // Parse the JWT payload\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    if (!payload.exp) return false;\n\n    // Check expiration\n    return Date.now() >= payload.exp * 1000;\n  } catch (error) {\n    console.error('Error checking token expiration:', error);\n    return true; // Assume expired if there's an error\n  }\n};\n\n// Add request interceptor to include auth token from localStorage if present\napi.interceptors.request.use(config => {\n  // For admin routes, use adminToken\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    // Check if token is expired before adding to request\n    if (!isTokenExpired(token)) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else {\n      console.log('Admin token expired, not adding to request');\n      localStorage.removeItem('adminToken');\n    }\n  }\n\n  // For regular user routes, use token if adminToken is not available\n  else {\n    const userToken = localStorage.getItem('token');\n    if (userToken && !isTokenExpired(userToken)) {\n      config.headers['Authorization'] = `Bearer ${userToken}`;\n    } else if (userToken && isTokenExpired(userToken)) {\n      console.log('User token expired, not adding to request');\n      // Don't remove token here, let the response interceptor handle logout\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Request Error:', error.response || error);\n\n  // Handle token expiration\n  if (error.response && error.response.status === 401) {\n    var _error$response$data;\n    // Check if error message indicates token expiration\n    const errorMsg = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '';\n    if (errorMsg.includes('expired') || errorMsg.includes('invalid token') || errorMsg.includes('jwt expired')) {\n      console.log('Token expired error detected in API response');\n\n      // Create and dispatch an event for token expiration\n      // This allows components to react to token expiration without direct dependency\n      const tokenExpiredEvent = new CustomEvent('tokenExpired', {\n        detail: {\n          message: 'Your session has expired. Please log in again.'\n        }\n      });\n      window.dispatchEvent(tokenExpiredEvent);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","isTokenExpired","token","payload","JSON","parse","atob","split","exp","Date","now","error","console","interceptors","request","use","config","localStorage","getItem","log","removeItem","userToken","Promise","reject","response","status","_error$response$data","errorMsg","data","message","includes","tokenExpiredEvent","CustomEvent","detail","window","dispatchEvent"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/config/axios.js"],"sourcesContent":["// config/axios.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000', // Make sure this matches your server URL\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  withCredentials: true // Important for sessions/cookies if used\r\n});\r\n\r\n// Function to check if token is expired\r\nconst isTokenExpired = (token) => {\r\n  if (!token) return true;\r\n  \r\n  try {\r\n    // Parse the JWT payload\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    if (!payload.exp) return false;\r\n    \r\n    // Check expiration\r\n    return Date.now() >= payload.exp * 1000;\r\n  } catch (error) {\r\n    console.error('Error checking token expiration:', error);\r\n    return true; // Assume expired if there's an error\r\n  }\r\n};\r\n\r\n// Add request interceptor to include auth token from localStorage if present\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // For admin routes, use adminToken\r\n    const token = localStorage.getItem('adminToken');\r\n    if (token) {\r\n      // Check if token is expired before adding to request\r\n      if (!isTokenExpired(token)) {\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n      } else {\r\n        console.log('Admin token expired, not adding to request');\r\n        localStorage.removeItem('adminToken');\r\n      }\r\n    }\r\n    \r\n    // For regular user routes, use token if adminToken is not available\r\n    else {\r\n      const userToken = localStorage.getItem('token');\r\n      if (userToken && !isTokenExpired(userToken)) {\r\n        config.headers['Authorization'] = `Bearer ${userToken}`;\r\n      } else if (userToken && isTokenExpired(userToken)) {\r\n        console.log('User token expired, not adding to request');\r\n        // Don't remove token here, let the response interceptor handle logout\r\n      }\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for better error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error.response || error);\r\n    \r\n    // Handle token expiration\r\n    if (error.response && error.response.status === 401) {\r\n      // Check if error message indicates token expiration\r\n      const errorMsg = error.response.data?.message || '';\r\n      if (\r\n        errorMsg.includes('expired') || \r\n        errorMsg.includes('invalid token') ||\r\n        errorMsg.includes('jwt expired')\r\n      ) {\r\n        console.log('Token expired error detected in API response');\r\n        \r\n        // Create and dispatch an event for token expiration\r\n        // This allows components to react to token expiration without direct dependency\r\n        const tokenExpiredEvent = new CustomEvent('tokenExpired', {\r\n          detail: { message: 'Your session has expired. Please log in again.' }\r\n        });\r\n        window.dispatchEvent(tokenExpiredEvent);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}