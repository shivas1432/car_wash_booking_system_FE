{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivashanker\\\\react\\\\car wash\\\\frontend\\\\src\\\\context\\\\UserContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user data from localStorage when app loads\n  useEffect(() => {\n    const storedUserData = localStorage.getItem('user');\n    if (storedUserData) {\n      try {\n        setUserData(JSON.parse(storedUserData));\n      } catch (error) {\n        console.error('Error parsing stored user data', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Set user data and store in localStorage\n  const setUser = data => {\n    setUserData(data);\n    if (data) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n  };\n\n  // Update specific user data fields\n  const updateUserData = updatedFields => {\n    if (userData) {\n      const updated = {\n        ...userData,\n        ...updatedFields\n      };\n      setUserData(updated);\n      localStorage.setItem('user', JSON.stringify(updated));\n    }\n  };\n\n  // Logout: Remove user data and token from localStorage\n  const logout = () => {\n    setUserData(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('adminToken'); // Also clear admin token if it exists\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userData,\n      setUser,\n      updateUserData,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"vhv7d1oa6lqjcjPHNBz2j0Rabdw=\");\n_c = UserProvider;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","userData","setUserData","loading","setLoading","storedUserData","localStorage","getItem","JSON","parse","error","console","removeItem","setUser","data","setItem","stringify","updateUserData","updatedFields","updated","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/context/UserContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Load user data from localStorage when app loads\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem('user');\r\n    if (storedUserData) {\r\n      try {\r\n        setUserData(JSON.parse(storedUserData));\r\n      } catch (error) {\r\n        console.error('Error parsing stored user data', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Set user data and store in localStorage\r\n  const setUser = (data) => {\r\n    setUserData(data);\r\n    if (data) {\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n  };\r\n  \r\n  // Update specific user data fields\r\n  const updateUserData = (updatedFields) => {\r\n    if (userData) {\r\n      const updated = { ...userData, ...updatedFields };\r\n      setUserData(updated);\r\n      localStorage.setItem('user', JSON.stringify(updated));\r\n    }\r\n  };\r\n  \r\n  // Logout: Remove user data and token from localStorage\r\n  const logout = () => {\r\n    setUserData(null);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('adminToken'); // Also clear admin token if it exists\r\n  };\r\n  \r\n  return (\r\n    <UserContext.Provider value={{ userData, setUser, updateUserData, logout, loading }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACnD,IAAIF,cAAc,EAAE;MAClB,IAAI;QACFH,WAAW,CAACM,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDJ,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;MACjC;IACF;IACAR,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,OAAO,GAAIC,IAAI,IAAK;IACxBZ,WAAW,CAACY,IAAI,CAAC;IACjB,IAAIA,IAAI,EAAE;MACRR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACF,IAAI,CAAC,CAAC;IACpD;EACF,CAAC;;EAED;EACA,MAAMG,cAAc,GAAIC,aAAa,IAAK;IACxC,IAAIjB,QAAQ,EAAE;MACZ,MAAMkB,OAAO,GAAG;QAAE,GAAGlB,QAAQ;QAAE,GAAGiB;MAAc,CAAC;MACjDhB,WAAW,CAACiB,OAAO,CAAC;MACpBb,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACG,OAAO,CAAC,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBlB,WAAW,CAAC,IAAI,CAAC;IACjBI,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/BN,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;EACzC,CAAC;EAED,oBACEhB,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAErB,QAAQ;MAAEY,OAAO;MAAEI,cAAc;MAAEG,MAAM;MAAEjB;IAAQ,CAAE;IAAAJ,QAAA,EACjFA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,EAAA,CAhDWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAkDzB,eAAeD,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}