{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivashanker\\\\react\\\\car wash\\\\frontend\\\\src\\\\context\\\\UserContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user data from localStorage when app loads\n  useEffect(() => {\n    const storedUserData = localStorage.getItem('user');\n    if (storedUserData) {\n      try {\n        setUserData(JSON.parse(storedUserData));\n      } catch (error) {\n        console.error('Error parsing stored user data', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Logout: Remove user data and token from localStorage\n  const logout = useCallback(() => {\n    setUserData(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('adminToken');\n    // Clear any axios default headers\n    delete axios.defaults.headers.common['Authorization'];\n  }, []);\n\n  // Check token expiration\n  const checkTokenExpiration = useCallback(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      // Decode the token payload (middle part of JWT between dots)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n\n      // Check if payload has expiration\n      if (!payload.exp) return false;\n\n      // Convert exp to milliseconds and compare with current time\n      const expiration = payload.exp * 1000; // JWT exp is in seconds\n      const isExpired = Date.now() >= expiration;\n      if (isExpired) {\n        console.log('Token is expired, logging out');\n        logout();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error checking token expiration:', error);\n      return true; // Assume expired if there's an error\n    }\n  }, [logout]);\n\n  // Simpler manual refresh function that's more reliable\n  const refreshUserData = useCallback(async () => {\n    // First check if token is expired\n    if (checkTokenExpiration()) return;\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await axios.get('http://localhost:5000/api/user/refresh', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data) {\n        // Update local state and localStorage\n        setUserData(response.data);\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Error refreshing user data:', error);\n      // Only logout on 401 Unauthorized errors\n      if (error.response && error.response.status === 401) {\n        logout();\n      }\n    }\n  }, [checkTokenExpiration, logout]);\n\n  // Set up automatic periodic refresh and token check\n  useEffect(() => {\n    let refreshInterval;\n    let tokenCheckInterval;\n    if (userData) {\n      // Refresh user data every 30 seconds if user is logged in\n      refreshInterval = setInterval(() => {\n        refreshUserData();\n      }, 30000); // 30 seconds\n\n      // Check token expiration every 5 minutes\n      tokenCheckInterval = setInterval(() => {\n        checkTokenExpiration();\n      }, 300000); // 5 minutes\n    }\n    return () => {\n      if (refreshInterval) clearInterval(refreshInterval);\n      if (tokenCheckInterval) clearInterval(tokenCheckInterval);\n    };\n  }, [userData, refreshUserData, checkTokenExpiration]);\n\n  // Set up axios interceptor for handling token expiration errors\n  useEffect(() => {\n    const interceptor = axios.interceptors.response.use(response => response, error => {\n      var _error$response$data, _error$response$data$, _error$response$data2, _error$response$data3;\n      // Check if error is due to token expiration\n      if (error.response && error.response.status === 401 && ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && (_error$response$data$ = _error$response$data.message) !== null && _error$response$data$ !== void 0 && _error$response$data$.includes('expired') || (_error$response$data2 = error.response.data) !== null && _error$response$data2 !== void 0 && (_error$response$data3 = _error$response$data2.message) !== null && _error$response$data3 !== void 0 && _error$response$data3.includes('invalid token'))) {\n        console.log('Token expired error caught by interceptor');\n        logout();\n      }\n      return Promise.reject(error);\n    });\n\n    // Clean up interceptor on unmount\n    return () => {\n      axios.interceptors.response.eject(interceptor);\n    };\n  }, [logout]);\n\n  // Set user data and store in localStorage\n  const setUser = useCallback(data => {\n    setUserData(data);\n    if (data) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n  }, []);\n\n  // Update specific user data fields\n  const updateUserData = useCallback(updatedFields => {\n    if (userData) {\n      const updated = {\n        ...userData,\n        ...updatedFields\n      };\n      setUserData(updated);\n      localStorage.setItem('user', JSON.stringify(updated));\n    }\n  }, [userData]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userData,\n      setUser,\n      updateUserData,\n      refreshUserData,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"BZQxztwLulxb3ni6D83n9+y/NTg=\");\n_c = UserProvider;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","userData","setUserData","loading","setLoading","storedUserData","localStorage","getItem","JSON","parse","error","console","removeItem","logout","defaults","headers","common","checkTokenExpiration","token","payload","atob","split","exp","expiration","isExpired","Date","now","log","refreshUserData","response","get","Authorization","data","setItem","stringify","status","refreshInterval","tokenCheckInterval","setInterval","clearInterval","interceptor","interceptors","use","_error$response$data","_error$response$data$","_error$response$data2","_error$response$data3","message","includes","Promise","reject","eject","setUser","updateUserData","updatedFields","updated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/context/UserContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the context\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Load user data from localStorage when app loads\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem('user');\r\n    if (storedUserData) {\r\n      try {\r\n        setUserData(JSON.parse(storedUserData));\r\n      } catch (error) {\r\n        console.error('Error parsing stored user data', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Logout: Remove user data and token from localStorage\r\n  const logout = useCallback(() => {\r\n    setUserData(null);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('adminToken');\r\n    // Clear any axios default headers\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }, []);\r\n\r\n  // Check token expiration\r\n  const checkTokenExpiration = useCallback(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      // Decode the token payload (middle part of JWT between dots)\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      \r\n      // Check if payload has expiration\r\n      if (!payload.exp) return false;\r\n      \r\n      // Convert exp to milliseconds and compare with current time\r\n      const expiration = payload.exp * 1000; // JWT exp is in seconds\r\n      const isExpired = Date.now() >= expiration;\r\n      \r\n      if (isExpired) {\r\n        console.log('Token is expired, logging out');\r\n        logout();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error checking token expiration:', error);\r\n      return true; // Assume expired if there's an error\r\n    }\r\n  }, [logout]);\r\n\r\n  // Simpler manual refresh function that's more reliable\r\n  const refreshUserData = useCallback(async () => {\r\n    // First check if token is expired\r\n    if (checkTokenExpiration()) return;\r\n    \r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n    \r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/user/refresh', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      if (response.data) {\r\n        // Update local state and localStorage\r\n        setUserData(response.data);\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing user data:', error);\r\n      // Only logout on 401 Unauthorized errors\r\n      if (error.response && error.response.status === 401) {\r\n        logout();\r\n      }\r\n    }\r\n  }, [checkTokenExpiration, logout]);\r\n\r\n  // Set up automatic periodic refresh and token check\r\n  useEffect(() => {\r\n    let refreshInterval;\r\n    let tokenCheckInterval;\r\n    \r\n    if (userData) {\r\n      // Refresh user data every 30 seconds if user is logged in\r\n      refreshInterval = setInterval(() => {\r\n        refreshUserData();\r\n      }, 30000); // 30 seconds\r\n      \r\n      // Check token expiration every 5 minutes\r\n      tokenCheckInterval = setInterval(() => {\r\n        checkTokenExpiration();\r\n      }, 300000); // 5 minutes\r\n    }\r\n    \r\n    return () => {\r\n      if (refreshInterval) clearInterval(refreshInterval);\r\n      if (tokenCheckInterval) clearInterval(tokenCheckInterval);\r\n    };\r\n  }, [userData, refreshUserData, checkTokenExpiration]);\r\n\r\n  // Set up axios interceptor for handling token expiration errors\r\n  useEffect(() => {\r\n    const interceptor = axios.interceptors.response.use(\r\n      response => response,\r\n      error => {\r\n        // Check if error is due to token expiration\r\n        if (\r\n          error.response && \r\n          error.response.status === 401 &&\r\n          (error.response.data?.message?.includes('expired') || \r\n           error.response.data?.message?.includes('invalid token'))\r\n        ) {\r\n          console.log('Token expired error caught by interceptor');\r\n          logout();\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n    \r\n    // Clean up interceptor on unmount\r\n    return () => {\r\n      axios.interceptors.response.eject(interceptor);\r\n    };\r\n  }, [logout]);\r\n\r\n  // Set user data and store in localStorage\r\n  const setUser = useCallback((data) => {\r\n    setUserData(data);\r\n    if (data) {\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n  }, []);\r\n\r\n  // Update specific user data fields\r\n  const updateUserData = useCallback((updatedFields) => {\r\n    if (userData) {\r\n      const updated = { ...userData, ...updatedFields };\r\n      setUserData(updated);\r\n      localStorage.setItem('user', JSON.stringify(updated));\r\n    }\r\n  }, [userData]);\r\n\r\n  return (\r\n    <UserContext.Provider value={{\r\n      userData,\r\n      setUser,\r\n      updateUserData,\r\n      refreshUserData,\r\n      logout,\r\n      loading\r\n    }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}