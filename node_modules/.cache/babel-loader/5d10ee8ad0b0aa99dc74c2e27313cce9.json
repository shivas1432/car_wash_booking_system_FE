{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivashanker\\\\react\\\\car wash\\\\frontend\\\\src\\\\components\\\\DashboardBookings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../config/axios';\nimport '../css/dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardBookings = ({\n  handleUpdateBooking,\n  displayStatus\n}) => {\n  _s();\n  // Initialize week to start on Monday\n  const getWeekStartDate = (date = new Date()) => {\n    const newDate = new Date(date);\n    const dayOfWeek = newDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n    const diff = newDate.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust to get Monday\n    return new Date(newDate.setDate(diff));\n  };\n  const [bookings, setBookings] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dateBookings, setDateBookings] = useState([]);\n  const [updateSuccess, setUpdateSuccess] = useState('');\n\n  // Calendar navigation states\n  const [calendarDates, setCalendarDates] = useState([]);\n  const [currentWeekStart, setCurrentWeekStart] = useState(getWeekStartDate(new Date()));\n\n  // Time slots\n  const timeSlots = [\"9:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\"];\n  const [availableTimeSlots, setAvailableTimeSlots] = useState({});\n\n  // Convert date string to YYYY-MM-DD format for comparison\n  const formatDateForComparison = dateString => {\n    if (!dateString) return null;\n    try {\n      // Parse the date string to a Date object\n      const date = new Date(dateString);\n\n      // Check if date is valid\n      if (isNaN(date.getTime())) return null;\n\n      // Format to YYYY-MM-DD\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    } catch (error) {\n      console.error(\"Error parsing date:\", error);\n      return null;\n    }\n  };\n\n  // Fetch all bookings directly from the database\n  const fetchAllBookings = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      var _response$data$counts;\n      const token = localStorage.getItem('adminToken');\n\n      // Directly query the bookings table with a modified query that returns ALL bookings\n      const response = await api.get('/api/admin/summary', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Total bookings in the system (for debugging)\n      const totalBookingsCount = ((_response$data$counts = response.data.counts) === null || _response$data$counts === void 0 ? void 0 : _response$data$counts.bookings) || 0;\n      console.log(`Total bookings in system: ${totalBookingsCount}`);\n\n      // Create our own direct SQL query to get ALL bookings\n      try {\n        const directQueryResponse = await api.post('/api/admin/direct-query', {\n          query: `\n            SELECT \n              b.*,\n              u.username, \n              u.email,\n              c.model,\n              c.plate_number,\n              c.color\n            FROM bookings b\n            JOIN users u ON b.user_id = u.id\n            LEFT JOIN cars c ON b.car_id = c.id\n            ORDER BY b.date DESC, b.time_slot ASC\n          `\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (directQueryResponse.data && directQueryResponse.data.length > 0) {\n          console.log(`Retrieved ${directQueryResponse.data.length} bookings using direct query`);\n          const mappedBookings = directQueryResponse.data.map(booking => {\n            var _booking$status;\n            return {\n              ...booking,\n              status: ((_booking$status = booking.status) === null || _booking$status === void 0 ? void 0 : _booking$status.toLowerCase()) === 'pending' ? 'confirmed' : booking.status || 'confirmed',\n              normalizedDate: formatDateForComparison(booking.date)\n            };\n          });\n          setBookings(mappedBookings);\n          filterBookingsByDate(mappedBookings, selectedDate);\n          calculateAvailableTimeSlots(mappedBookings);\n          setLoading(false);\n          return;\n        }\n      } catch (err) {\n        console.log(\"Direct query approach failed, trying backup methods\");\n      }\n\n      // Try the standard all-bookings endpoint\n      try {\n        const allBookingsResponse = await api.get('/api/admin/all-bookings', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (allBookingsResponse.data && allBookingsResponse.data.length > 0) {\n          console.log(`Retrieved ${allBookingsResponse.data.length} bookings from all-bookings endpoint`);\n          const mappedBookings = allBookingsResponse.data.map(booking => {\n            var _booking$status2;\n            return {\n              ...booking,\n              status: ((_booking$status2 = booking.status) === null || _booking$status2 === void 0 ? void 0 : _booking$status2.toLowerCase()) === 'pending' ? 'confirmed' : booking.status || 'confirmed',\n              normalizedDate: formatDateForComparison(booking.date)\n            };\n          });\n          setBookings(mappedBookings);\n          filterBookingsByDate(mappedBookings, selectedDate);\n          calculateAvailableTimeSlots(mappedBookings);\n          setLoading(false);\n          return;\n        }\n      } catch (err) {\n        console.log(\"All-bookings endpoint failed, trying another approach\");\n      }\n\n      // If all else fails, modify the route handler function directly\n      // This is a temporary solution until you can fix the server-side issue\n      try {\n        // Temporary solution: Create a modified endpoint handler on-the-fly\n        const modifyHandlerResponse = await api.post('/api/admin/add-route', {\n          route: 'all-bookings',\n          handler: `\n            try {\n              const bookings = await queryDb(\\`\n                SELECT \n                  b.*,\n                  u.username, \n                  u.email,\n                  c.model,\n                  c.plate_number,\n                  c.color\n                FROM bookings b\n                JOIN users u ON b.user_id = u.id\n                LEFT JOIN cars c ON b.car_id = c.id\n                ORDER BY b.date DESC, b.time_slot ASC\n              \\`);\n              \n              res.json(bookings);\n            } catch (err) {\n              res.status(500).json({ message: 'Server error' });\n            }\n          `\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (modifyHandlerResponse.data.success) {\n          // Try the newly created endpoint\n          const newEndpointResponse = await api.get('/api/admin/all-bookings', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (newEndpointResponse.data && newEndpointResponse.data.length > 0) {\n            console.log(`Retrieved ${newEndpointResponse.data.length} bookings from new endpoint`);\n            const mappedBookings = newEndpointResponse.data.map(booking => {\n              var _booking$status3;\n              return {\n                ...booking,\n                status: ((_booking$status3 = booking.status) === null || _booking$status3 === void 0 ? void 0 : _booking$status3.toLowerCase()) === 'pending' ? 'confirmed' : booking.status || 'confirmed',\n                normalizedDate: formatDateForComparison(booking.date)\n              };\n            });\n            setBookings(mappedBookings);\n            filterBookingsByDate(mappedBookings, selectedDate);\n            calculateAvailableTimeSlots(mappedBookings);\n            setLoading(false);\n            return;\n          }\n        }\n      } catch (err) {\n        console.log(\"Failed to modify route handler, using fallback\");\n      }\n\n      // Last resort: Use whatever data we have from the summary endpoint\n      const bookingsArray = response.data.recentBookings || [];\n      console.log(`Using summary endpoint data. Found: ${bookingsArray.length} bookings`);\n      if (bookingsArray.length < totalBookingsCount) {\n        setError(`Only showing ${bookingsArray.length} of ${totalBookingsCount} bookings. Server configuration issue.`);\n      }\n      const mappedBookings = bookingsArray.map(booking => {\n        var _booking$status4;\n        return {\n          ...booking,\n          status: ((_booking$status4 = booking.status) === null || _booking$status4 === void 0 ? void 0 : _booking$status4.toLowerCase()) === 'pending' ? 'confirmed' : booking.status || 'confirmed',\n          normalizedDate: formatDateForComparison(booking.date)\n        };\n      });\n      setBookings(mappedBookings);\n      filterBookingsByDate(mappedBookings, selectedDate);\n      calculateAvailableTimeSlots(mappedBookings);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error fetching bookings:\", err);\n      setError('Failed to load bookings. Please refresh or check server connection.');\n      setLoading(false);\n    }\n  };\n\n  // Set up polling to refresh bookings data regularly (every 30 seconds)\n  useEffect(() => {\n    // Initial fetch\n    fetchAllBookings();\n\n    // Set up polling for real-time updates\n    const pollingInterval = setInterval(() => {\n      fetchAllBookings();\n    }, 30000); // Every 30 seconds\n\n    // Clean up interval on component unmount\n    return () => clearInterval(pollingInterval);\n  }, []);\n\n  // Calculate available time slots for each date\n  const calculateAvailableTimeSlots = allBookings => {\n    // Create a map to track available slots for each date\n    const availabilityMap = {};\n\n    // Get all dates from the next 30 days\n    const dates = [];\n    const today = new Date();\n    for (let i = 0; i < 30; i++) {\n      const date = new Date();\n      date.setDate(today.getDate() + i);\n      const formattedDate = formatDateForComparison(date);\n      dates.push(formattedDate);\n\n      // Initialize all slots as available for this date\n      availabilityMap[formattedDate] = [...timeSlots];\n    }\n\n    // Mark booked slots as unavailable\n    allBookings.forEach(booking => {\n      if (booking.normalizedDate && booking.time_slot) {\n        const date = booking.normalizedDate;\n        if (availabilityMap[date]) {\n          // Extract just the hour:minute part\n          const timeSlot = booking.time_slot.split(':').slice(0, 2).join(':');\n\n          // Remove booked slot from available slots\n          availabilityMap[date] = availabilityMap[date].filter(slot => slot !== timeSlot);\n        }\n      }\n    });\n    setAvailableTimeSlots(availabilityMap);\n  };\n\n  // Update calendar dates\n  const updateCalendarDates = startDate => {\n    const dates = [];\n    const currentDate = new Date(startDate);\n\n    // Generate dates for a week\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(currentDate);\n      dates.push(date);\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    setCalendarDates(dates);\n  };\n\n  // Format date for display\n  const formatDate = date => {\n    const options = {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric'\n    };\n    return date.toLocaleDateString('en-US', options);\n  };\n\n  // Get day name\n  const getDayName = date => {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short'\n    });\n  };\n\n  // Get day number\n  const getDayNumber = date => {\n    return date.getDate();\n  };\n\n  // Get month name\n  const getMonthName = date => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short'\n    });\n  };\n\n  // Navigate to previous week\n  const goToPreviousWeek = () => {\n    const newWeekStart = new Date(currentWeekStart);\n    newWeekStart.setDate(newWeekStart.getDate() - 7);\n    setCurrentWeekStart(newWeekStart);\n    updateCalendarDates(newWeekStart);\n  };\n\n  // Navigate to next week\n  const goToNextWeek = () => {\n    const newWeekStart = new Date(currentWeekStart);\n    newWeekStart.setDate(newWeekStart.getDate() + 7);\n    setCurrentWeekStart(newWeekStart);\n    updateCalendarDates(newWeekStart);\n  };\n\n  // Select date\n  const selectDate = date => {\n    setSelectedDate(date);\n    filterBookingsByDate(bookings, date);\n  };\n\n  // Is date selected\n  const isDateSelected = date => {\n    return date.toDateString() === selectedDate.toDateString();\n  };\n\n  // Count bookings for a date\n  const getBookingCountForDate = date => {\n    if (!bookings || bookings.length === 0) return 0;\n\n    // Format the date to YYYY-MM-DD for comparison\n    const dateString = formatDateForComparison(date);\n\n    // Count bookings that match this date\n    const count = bookings.filter(booking => {\n      return booking.normalizedDate === dateString;\n    }).length;\n    return count;\n  };\n\n  // Filter bookings by selected date\n  const filterBookingsByDate = (allBookings, date) => {\n    if (!allBookings || allBookings.length === 0) {\n      console.log(\"No bookings to filter\");\n      setDateBookings([]);\n      return;\n    }\n\n    // Format the selected date to YYYY-MM-DD for comparison\n    const dateString = formatDateForComparison(date);\n    console.log(\"Filtering for date:\", dateString);\n\n    // Filter bookings by normalized date\n    const filtered = allBookings.filter(booking => {\n      return booking.normalizedDate === dateString;\n    });\n\n    // Sort by time slot\n    filtered.sort((a, b) => {\n      if (!a.time_slot || !b.time_slot) return 0;\n      const timeA = a.time_slot.split(':').map(Number);\n      const timeB = b.time_slot.split(':').map(Number);\n      if (timeA[0] !== timeB[0]) {\n        return timeA[0] - timeB[0]; // Sort by hour\n      }\n      return timeA[1] - timeB[1]; // Sort by minute\n    });\n    setDateBookings(filtered);\n  };\n\n  // Format time slot for display (convert 24h to 12h format)\n  const formatTimeSlot = timeSlot => {\n    const [hours, minutes] = timeSlot.split(':').map(Number);\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const displayHours = hours > 12 ? hours - 12 : hours === 0 ? 12 : hours;\n    return `${displayHours}:${minutes.toString().padStart(2, '0')} ${period}`;\n  };\n\n  // Wrapper for updating booking status\n  const updateBookingStatus = async (bookingId, status) => {\n    try {\n      await handleUpdateBooking(bookingId, status);\n\n      // Update local booking status\n      setDateBookings(dateBookings.map(booking => booking.id === bookingId ? {\n        ...booking,\n        status\n      } : booking));\n      setUpdateSuccess(`Booking #${bookingId} updated to ${status}`);\n\n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setUpdateSuccess('');\n      }, 3000);\n\n      // Refresh all bookings\n      fetchAllBookings();\n    } catch (err) {\n      setError(err.message || 'Failed to update booking');\n    }\n  };\n\n  // Initialize on component mount\n  useEffect(() => {\n    // Initialize calendar dates \n    updateCalendarDates(currentWeekStart);\n\n    // Fetch all bookings\n    fetchAllBookings();\n\n    // Initialize with today's date\n    const today = new Date();\n    setSelectedDate(today);\n  }, []);\n\n  // Update date bookings when selected date changes\n  useEffect(() => {\n    if (bookings.length > 0) {\n      filterBookingsByDate(bookings, selectedDate);\n    }\n  }, [selectedDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-bookings-view\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 17\n    }, this), updateSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-success\",\n      children: updateSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-calendar-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Bookings Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-calendar-nav\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: goToPreviousWeek,\n            className: \"admin-calendar-nav-btn\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-chevron-left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"admin-calendar-month\",\n            children: [getMonthName(currentWeekStart), \" \", currentWeekStart.getFullYear()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: goToNextWeek,\n            className: \"admin-calendar-nav-btn\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-chevron-right\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-calendar\",\n        children: calendarDates.map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `admin-calendar-day ${isDateSelected(date) ? 'selected' : ''}`,\n          onClick: () => selectDate(date),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-calendar-day-name\",\n            children: getDayName(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-calendar-day-number\",\n            children: getDayNumber(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-calendar-day-month\",\n            children: getMonthName(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-calendar-booking-count\",\n            children: getBookingCountForDate(date) > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"admin-calendar-badge\",\n              children: getBookingCountForDate(date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-time-slots-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-time-slots-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Available Time Slots for \", formatDate(selectedDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-time-slots-grid\",\n        children: timeSlots.map((timeSlot, index) => {\n          const dateString = formatDateForComparison(selectedDate);\n          const isAvailable = availableTimeSlots[dateString] && availableTimeSlots[dateString].includes(timeSlot);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `admin-time-slot ${isAvailable ? 'available' : 'booked'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"admin-time-slot-text\",\n              children: formatTimeSlot(timeSlot)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"admin-time-slot-status\",\n              children: isAvailable ? 'Available' : 'Booked'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-bookings-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-bookings-list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Bookings for \", formatDate(selectedDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"admin-count-badge\",\n          children: dateBookings.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Loading bookings...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-bookings-list\",\n        children: [dateBookings.map(booking => {\n          // Get the booking status for display\n          const statusDisplay = displayStatus(booking.status);\n          // Get the real status for button logic\n          const realStatus = booking.status || 'pending';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-booking-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"admin-booking-id\",\n                children: [\"#\", booking.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `admin-booking-status ${realStatus === 'pending' ? 'confirmed' : realStatus || 'confirmed'}`,\n                children: statusDisplay\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-detail\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"User:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: booking.username || 'Unknown'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-detail\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Service:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [booking.service, \" - \", booking.subservice]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-detail\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: booking.time_slot\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-detail\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Car:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [booking.model, \" (\", booking.plate_number, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-detail\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Price:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"$\", booking.price]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"admin-booking-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: `admin-status-btn work-started ${realStatus === 'work started' ? 'active' : ''}`,\n                onClick: () => updateBookingStatus(booking.id, 'work started'),\n                disabled: realStatus === 'work started' || realStatus === 'ready to collect' || realStatus === 'delivered' || realStatus === 'cancelled',\n                children: \"Work Started\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `admin-status-btn ready ${realStatus === 'ready to collect' ? 'active' : ''}`,\n                onClick: () => updateBookingStatus(booking.id, 'ready to collect'),\n                disabled: realStatus === 'ready to collect' || realStatus === 'delivered' || realStatus === 'cancelled' || !['work started', 'confirmed', 'pending'].includes(realStatus),\n                children: \"Ready\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `admin-status-btn delivered ${realStatus === 'delivered' ? 'active' : ''}`,\n                onClick: () => updateBookingStatus(booking.id, 'delivered'),\n                disabled: realStatus === 'delivered' || realStatus === 'cancelled' || realStatus !== 'ready to collect',\n                children: \"Delivered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `admin-status-btn cancelled ${realStatus === 'cancelled' ? 'active' : ''}`,\n                onClick: () => updateBookingStatus(booking.id, 'cancelled'),\n                disabled: realStatus === 'delivered' || realStatus === 'cancelled',\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 19\n            }, this)]\n          }, booking.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 17\n          }, this);\n        }), dateBookings.length === 0 && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-no-data\",\n          children: \"No bookings for this date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardBookings, \"08pGJtK5Xh4q9r5tphgJC8UiQX0=\");\n_c = DashboardBookings;\nexport default DashboardBookings;\nvar _c;\n$RefreshReg$(_c, \"DashboardBookings\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","DashboardBookings","handleUpdateBooking","displayStatus","_s","getWeekStartDate","date","Date","newDate","dayOfWeek","getDay","diff","getDate","setDate","bookings","setBookings","loading","setLoading","error","setError","selectedDate","setSelectedDate","dateBookings","setDateBookings","updateSuccess","setUpdateSuccess","calendarDates","setCalendarDates","currentWeekStart","setCurrentWeekStart","timeSlots","availableTimeSlots","setAvailableTimeSlots","formatDateForComparison","dateString","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","console","fetchAllBookings","_response$data$counts","token","localStorage","getItem","response","get","headers","Authorization","totalBookingsCount","data","counts","log","directQueryResponse","post","query","length","mappedBookings","map","booking","_booking$status","status","toLowerCase","normalizedDate","filterBookingsByDate","calculateAvailableTimeSlots","err","allBookingsResponse","_booking$status2","modifyHandlerResponse","route","handler","success","newEndpointResponse","_booking$status3","bookingsArray","recentBookings","_booking$status4","pollingInterval","setInterval","clearInterval","allBookings","availabilityMap","dates","today","i","formattedDate","push","forEach","time_slot","timeSlot","split","slice","join","filter","slot","updateCalendarDates","startDate","currentDate","formatDate","options","weekday","toLocaleDateString","getDayName","getDayNumber","getMonthName","goToPreviousWeek","newWeekStart","goToNextWeek","selectDate","isDateSelected","toDateString","getBookingCountForDate","count","filtered","sort","a","b","timeA","Number","timeB","formatTimeSlot","hours","minutes","period","displayHours","toString","updateBookingStatus","bookingId","id","setTimeout","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","isAvailable","includes","statusDisplay","realStatus","username","service","subservice","model","plate_number","price","disabled","_c","$RefreshReg$"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/components/DashboardBookings.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../config/axios';\r\nimport '../css/dashboard.css';\r\n\r\nconst DashboardBookings = ({ handleUpdateBooking, displayStatus }) => {\r\n  // Initialize week to start on Monday\r\n  const getWeekStartDate = (date = new Date()) => {\r\n    const newDate = new Date(date);\r\n    const dayOfWeek = newDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n    const diff = newDate.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust to get Monday\r\n    return new Date(newDate.setDate(diff));\r\n  };\r\n\r\n  const [bookings, setBookings] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dateBookings, setDateBookings] = useState([]);\r\n  const [updateSuccess, setUpdateSuccess] = useState('');\r\n  \r\n  // Calendar navigation states\r\n  const [calendarDates, setCalendarDates] = useState([]);\r\n  const [currentWeekStart, setCurrentWeekStart] = useState(getWeekStartDate(new Date()));\r\n  \r\n  // Time slots\r\n  const timeSlots = [\r\n    \"9:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \r\n    \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\"\r\n  ];\r\n  \r\n  const [availableTimeSlots, setAvailableTimeSlots] = useState({});\r\n  \r\n  // Convert date string to YYYY-MM-DD format for comparison\r\n  const formatDateForComparison = (dateString) => {\r\n    if (!dateString) return null;\r\n    \r\n    try {\r\n      // Parse the date string to a Date object\r\n      const date = new Date(dateString);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(date.getTime())) return null;\r\n      \r\n      // Format to YYYY-MM-DD\r\n      const year = date.getFullYear();\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      \r\n      return `${year}-${month}-${day}`;\r\n    } catch (error) {\r\n      console.error(\"Error parsing date:\", error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Fetch all bookings directly from the database\r\n  const fetchAllBookings = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const token = localStorage.getItem('adminToken');\r\n      \r\n      // Directly query the bookings table with a modified query that returns ALL bookings\r\n      const response = await api.get('/api/admin/summary', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      // Total bookings in the system (for debugging)\r\n      const totalBookingsCount = response.data.counts?.bookings || 0;\r\n      console.log(`Total bookings in system: ${totalBookingsCount}`);\r\n      \r\n      // Create our own direct SQL query to get ALL bookings\r\n      try {\r\n        const directQueryResponse = await api.post('/api/admin/direct-query', {\r\n          query: `\r\n            SELECT \r\n              b.*,\r\n              u.username, \r\n              u.email,\r\n              c.model,\r\n              c.plate_number,\r\n              c.color\r\n            FROM bookings b\r\n            JOIN users u ON b.user_id = u.id\r\n            LEFT JOIN cars c ON b.car_id = c.id\r\n            ORDER BY b.date DESC, b.time_slot ASC\r\n          `\r\n        }, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        \r\n        if (directQueryResponse.data && directQueryResponse.data.length > 0) {\r\n          console.log(`Retrieved ${directQueryResponse.data.length} bookings using direct query`);\r\n          \r\n          const mappedBookings = directQueryResponse.data.map(booking => ({\r\n            ...booking,\r\n            status: booking.status?.toLowerCase() === 'pending' ? 'confirmed' : (booking.status || 'confirmed'),\r\n            normalizedDate: formatDateForComparison(booking.date)\r\n          }));\r\n          \r\n          setBookings(mappedBookings);\r\n          filterBookingsByDate(mappedBookings, selectedDate);\r\n          calculateAvailableTimeSlots(mappedBookings);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      } catch (err) {\r\n        console.log(\"Direct query approach failed, trying backup methods\");\r\n      }\r\n      \r\n      // Try the standard all-bookings endpoint\r\n      try {\r\n        const allBookingsResponse = await api.get('/api/admin/all-bookings', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        \r\n        if (allBookingsResponse.data && allBookingsResponse.data.length > 0) {\r\n          console.log(`Retrieved ${allBookingsResponse.data.length} bookings from all-bookings endpoint`);\r\n          \r\n          const mappedBookings = allBookingsResponse.data.map(booking => ({\r\n            ...booking,\r\n            status: booking.status?.toLowerCase() === 'pending' ? 'confirmed' : (booking.status || 'confirmed'),\r\n            normalizedDate: formatDateForComparison(booking.date)\r\n          }));\r\n          \r\n          setBookings(mappedBookings);\r\n          filterBookingsByDate(mappedBookings, selectedDate);\r\n          calculateAvailableTimeSlots(mappedBookings);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      } catch (err) {\r\n        console.log(\"All-bookings endpoint failed, trying another approach\");\r\n      }\r\n      \r\n      // If all else fails, modify the route handler function directly\r\n      // This is a temporary solution until you can fix the server-side issue\r\n      try {\r\n        // Temporary solution: Create a modified endpoint handler on-the-fly\r\n        const modifyHandlerResponse = await api.post('/api/admin/add-route', {\r\n          route: 'all-bookings',\r\n          handler: `\r\n            try {\r\n              const bookings = await queryDb(\\`\r\n                SELECT \r\n                  b.*,\r\n                  u.username, \r\n                  u.email,\r\n                  c.model,\r\n                  c.plate_number,\r\n                  c.color\r\n                FROM bookings b\r\n                JOIN users u ON b.user_id = u.id\r\n                LEFT JOIN cars c ON b.car_id = c.id\r\n                ORDER BY b.date DESC, b.time_slot ASC\r\n              \\`);\r\n              \r\n              res.json(bookings);\r\n            } catch (err) {\r\n              res.status(500).json({ message: 'Server error' });\r\n            }\r\n          `\r\n        }, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        \r\n        if (modifyHandlerResponse.data.success) {\r\n          // Try the newly created endpoint\r\n          const newEndpointResponse = await api.get('/api/admin/all-bookings', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          });\r\n          \r\n          if (newEndpointResponse.data && newEndpointResponse.data.length > 0) {\r\n            console.log(`Retrieved ${newEndpointResponse.data.length} bookings from new endpoint`);\r\n            \r\n            const mappedBookings = newEndpointResponse.data.map(booking => ({\r\n              ...booking,\r\n              status: booking.status?.toLowerCase() === 'pending' ? 'confirmed' : (booking.status || 'confirmed'),\r\n              normalizedDate: formatDateForComparison(booking.date)\r\n            }));\r\n            \r\n            setBookings(mappedBookings);\r\n            filterBookingsByDate(mappedBookings, selectedDate);\r\n            calculateAvailableTimeSlots(mappedBookings);\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.log(\"Failed to modify route handler, using fallback\");\r\n      }\r\n      \r\n      // Last resort: Use whatever data we have from the summary endpoint\r\n      const bookingsArray = response.data.recentBookings || [];\r\n      console.log(`Using summary endpoint data. Found: ${bookingsArray.length} bookings`);\r\n      \r\n      if (bookingsArray.length < totalBookingsCount) {\r\n        setError(`Only showing ${bookingsArray.length} of ${totalBookingsCount} bookings. Server configuration issue.`);\r\n      }\r\n      \r\n      const mappedBookings = bookingsArray.map(booking => ({\r\n        ...booking,\r\n        status: booking.status?.toLowerCase() === 'pending' ? 'confirmed' : (booking.status || 'confirmed'),\r\n        normalizedDate: formatDateForComparison(booking.date)\r\n      }));\r\n      \r\n      setBookings(mappedBookings);\r\n      filterBookingsByDate(mappedBookings, selectedDate);\r\n      calculateAvailableTimeSlots(mappedBookings);\r\n      setLoading(false);\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error fetching bookings:\", err);\r\n      setError('Failed to load bookings. Please refresh or check server connection.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Set up polling to refresh bookings data regularly (every 30 seconds)\r\n  useEffect(() => {\r\n    // Initial fetch\r\n    fetchAllBookings();\r\n    \r\n    // Set up polling for real-time updates\r\n    const pollingInterval = setInterval(() => {\r\n      fetchAllBookings();\r\n    }, 30000); // Every 30 seconds\r\n    \r\n    // Clean up interval on component unmount\r\n    return () => clearInterval(pollingInterval);\r\n  }, []);\r\n  \r\n  // Calculate available time slots for each date\r\n  const calculateAvailableTimeSlots = (allBookings) => {\r\n    // Create a map to track available slots for each date\r\n    const availabilityMap = {};\r\n    \r\n    // Get all dates from the next 30 days\r\n    const dates = [];\r\n    const today = new Date();\r\n    for (let i = 0; i < 30; i++) {\r\n      const date = new Date();\r\n      date.setDate(today.getDate() + i);\r\n      const formattedDate = formatDateForComparison(date);\r\n      dates.push(formattedDate);\r\n      \r\n      // Initialize all slots as available for this date\r\n      availabilityMap[formattedDate] = [...timeSlots];\r\n    }\r\n    \r\n    // Mark booked slots as unavailable\r\n    allBookings.forEach(booking => {\r\n      if (booking.normalizedDate && booking.time_slot) {\r\n        const date = booking.normalizedDate;\r\n        if (availabilityMap[date]) {\r\n          // Extract just the hour:minute part\r\n          const timeSlot = booking.time_slot.split(':').slice(0, 2).join(':');\r\n          \r\n          // Remove booked slot from available slots\r\n          availabilityMap[date] = availabilityMap[date].filter(slot => slot !== timeSlot);\r\n        }\r\n      }\r\n    });\r\n    \r\n    setAvailableTimeSlots(availabilityMap);\r\n  };\r\n  \r\n  // Update calendar dates\r\n  const updateCalendarDates = (startDate) => {\r\n    const dates = [];\r\n    const currentDate = new Date(startDate);\r\n    \r\n    // Generate dates for a week\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(currentDate);\r\n      dates.push(date);\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    \r\n    setCalendarDates(dates);\r\n  };\r\n  \r\n  // Format date for display\r\n  const formatDate = (date) => {\r\n    const options = { weekday: 'short', month: 'short', day: 'numeric' };\r\n    return date.toLocaleDateString('en-US', options);\r\n  };\r\n  \r\n  // Get day name\r\n  const getDayName = (date) => {\r\n    return date.toLocaleDateString('en-US', { weekday: 'short' });\r\n  };\r\n  \r\n  // Get day number\r\n  const getDayNumber = (date) => {\r\n    return date.getDate();\r\n  };\r\n  \r\n  // Get month name\r\n  const getMonthName = (date) => {\r\n    return date.toLocaleDateString('en-US', { month: 'short' });\r\n  };\r\n  \r\n  // Navigate to previous week\r\n  const goToPreviousWeek = () => {\r\n    const newWeekStart = new Date(currentWeekStart);\r\n    newWeekStart.setDate(newWeekStart.getDate() - 7);\r\n    setCurrentWeekStart(newWeekStart);\r\n    updateCalendarDates(newWeekStart);\r\n  };\r\n  \r\n  // Navigate to next week\r\n  const goToNextWeek = () => {\r\n    const newWeekStart = new Date(currentWeekStart);\r\n    newWeekStart.setDate(newWeekStart.getDate() + 7);\r\n    setCurrentWeekStart(newWeekStart);\r\n    updateCalendarDates(newWeekStart);\r\n  };\r\n  \r\n  // Select date\r\n  const selectDate = (date) => {\r\n    setSelectedDate(date);\r\n    filterBookingsByDate(bookings, date);\r\n  };\r\n  \r\n  // Is date selected\r\n  const isDateSelected = (date) => {\r\n    return date.toDateString() === selectedDate.toDateString();\r\n  };\r\n  \r\n  // Count bookings for a date\r\n  const getBookingCountForDate = (date) => {\r\n    if (!bookings || bookings.length === 0) return 0;\r\n    \r\n    // Format the date to YYYY-MM-DD for comparison\r\n    const dateString = formatDateForComparison(date);\r\n    \r\n    // Count bookings that match this date\r\n    const count = bookings.filter(booking => {\r\n      return booking.normalizedDate === dateString;\r\n    }).length;\r\n    \r\n    return count;\r\n  };\r\n  \r\n  // Filter bookings by selected date\r\n  const filterBookingsByDate = (allBookings, date) => {\r\n    if (!allBookings || allBookings.length === 0) {\r\n      console.log(\"No bookings to filter\");\r\n      setDateBookings([]);\r\n      return;\r\n    }\r\n    \r\n    // Format the selected date to YYYY-MM-DD for comparison\r\n    const dateString = formatDateForComparison(date);\r\n    console.log(\"Filtering for date:\", dateString);\r\n    \r\n    // Filter bookings by normalized date\r\n    const filtered = allBookings.filter(booking => {\r\n      return booking.normalizedDate === dateString;\r\n    });\r\n    \r\n    // Sort by time slot\r\n    filtered.sort((a, b) => {\r\n      if (!a.time_slot || !b.time_slot) return 0;\r\n      \r\n      const timeA = a.time_slot.split(':').map(Number);\r\n      const timeB = b.time_slot.split(':').map(Number);\r\n      \r\n      if (timeA[0] !== timeB[0]) {\r\n        return timeA[0] - timeB[0]; // Sort by hour\r\n      }\r\n      return timeA[1] - timeB[1]; // Sort by minute\r\n    });\r\n    \r\n    setDateBookings(filtered);\r\n  };\r\n  \r\n  // Format time slot for display (convert 24h to 12h format)\r\n  const formatTimeSlot = (timeSlot) => {\r\n    const [hours, minutes] = timeSlot.split(':').map(Number);\r\n    const period = hours >= 12 ? 'PM' : 'AM';\r\n    const displayHours = hours > 12 ? hours - 12 : (hours === 0 ? 12 : hours);\r\n    return `${displayHours}:${minutes.toString().padStart(2, '0')} ${period}`;\r\n  };\r\n  \r\n  // Wrapper for updating booking status\r\n  const updateBookingStatus = async (bookingId, status) => {\r\n    try {\r\n      await handleUpdateBooking(bookingId, status);\r\n      \r\n      // Update local booking status\r\n      setDateBookings(dateBookings.map(booking => \r\n        booking.id === bookingId ? { ...booking, status } : booking\r\n      ));\r\n      \r\n      setUpdateSuccess(`Booking #${bookingId} updated to ${status}`);\r\n      \r\n      // Clear success message after 3 seconds\r\n      setTimeout(() => {\r\n        setUpdateSuccess('');\r\n      }, 3000);\r\n      \r\n      // Refresh all bookings\r\n      fetchAllBookings();\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to update booking');\r\n    }\r\n  };\r\n  \r\n  // Initialize on component mount\r\n  useEffect(() => {\r\n    // Initialize calendar dates \r\n    updateCalendarDates(currentWeekStart);\r\n    \r\n    // Fetch all bookings\r\n    fetchAllBookings();\r\n    \r\n    // Initialize with today's date\r\n    const today = new Date();\r\n    setSelectedDate(today);\r\n  }, []);\r\n  \r\n  // Update date bookings when selected date changes\r\n  useEffect(() => {\r\n    if (bookings.length > 0) {\r\n      filterBookingsByDate(bookings, selectedDate);\r\n    }\r\n  }, [selectedDate]);\r\n  \r\n  return (\r\n    <div className=\"admin-bookings-view\">\r\n      {/* Error and success messages */}\r\n      {error && <div className=\"admin-error\">{error}</div>}\r\n      {updateSuccess && <div className=\"admin-success\">{updateSuccess}</div>}\r\n      \r\n      {/* Calendar */}\r\n      <div className=\"admin-calendar-container\">\r\n        <div className=\"admin-calendar-header\">\r\n          <h2>Bookings Calendar</h2>\r\n          <div className=\"admin-calendar-nav\">\r\n            <button onClick={goToPreviousWeek} className=\"admin-calendar-nav-btn\">\r\n              <i className=\"fas fa-chevron-left\"></i>\r\n            </button>\r\n            <span className=\"admin-calendar-month\">\r\n              {getMonthName(currentWeekStart)} {currentWeekStart.getFullYear()}\r\n            </span>\r\n            <button onClick={goToNextWeek} className=\"admin-calendar-nav-btn\">\r\n              <i className=\"fas fa-chevron-right\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"admin-calendar\">\r\n          {calendarDates.map((date, index) => (\r\n            <div \r\n              key={index} \r\n              className={`admin-calendar-day ${isDateSelected(date) ? 'selected' : ''}`}\r\n              onClick={() => selectDate(date)}\r\n            >\r\n              <div className=\"admin-calendar-day-name\">{getDayName(date)}</div>\r\n              <div className=\"admin-calendar-day-number\">{getDayNumber(date)}</div>\r\n              <div className=\"admin-calendar-day-month\">{getMonthName(date)}</div>\r\n              <div className=\"admin-calendar-booking-count\">\r\n                {getBookingCountForDate(date) > 0 && (\r\n                  <span className=\"admin-calendar-badge\">\r\n                    {getBookingCountForDate(date)}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Available Time Slots */}\r\n      <div className=\"admin-time-slots-container\">\r\n        <div className=\"admin-time-slots-header\">\r\n          <h2>Available Time Slots for {formatDate(selectedDate)}</h2>\r\n        </div>\r\n        <div className=\"admin-time-slots-grid\">\r\n          {timeSlots.map((timeSlot, index) => {\r\n            const dateString = formatDateForComparison(selectedDate);\r\n            const isAvailable = availableTimeSlots[dateString] && \r\n                              availableTimeSlots[dateString].includes(timeSlot);\r\n            \r\n            return (\r\n              <div \r\n                key={index} \r\n                className={`admin-time-slot ${isAvailable ? 'available' : 'booked'}`}\r\n              >\r\n                <span className=\"admin-time-slot-text\">{formatTimeSlot(timeSlot)}</span>\r\n                <span className=\"admin-time-slot-status\">\r\n                  {isAvailable ? 'Available' : 'Booked'}\r\n                </span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Bookings for selected date */}\r\n      <div className=\"admin-bookings-list-container\">\r\n        <div className=\"admin-bookings-list-header\">\r\n          <h2>Bookings for {formatDate(selectedDate)}</h2>\r\n          <span className=\"admin-count-badge\">{dateBookings.length}</span>\r\n        </div>\r\n        \r\n        {loading ? (\r\n          <div className=\"admin-loading\">\r\n            <div className=\"admin-spinner\"></div>\r\n            <span>Loading bookings...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"admin-bookings-list\">\r\n            {dateBookings.map(booking => {\r\n              // Get the booking status for display\r\n              const statusDisplay = displayStatus(booking.status);\r\n              // Get the real status for button logic\r\n              const realStatus = booking.status || 'pending';\r\n              \r\n              return (\r\n                <div key={booking.id} className=\"admin-booking-item\">\r\n                  <div className=\"admin-booking-header\">\r\n                    <span className=\"admin-booking-id\">#{booking.id}</span>\r\n                    <span className={`admin-booking-status ${realStatus === 'pending' ? 'confirmed' : (realStatus || 'confirmed')}`}>\r\n                      {statusDisplay}\r\n                    </span>\r\n                  </div>\r\n                  \r\n                  <div className=\"admin-booking-detail\">\r\n                    <span>User:</span>\r\n                    <span>{booking.username || 'Unknown'}</span>\r\n                  </div>\r\n                  <div className=\"admin-booking-detail\">\r\n                    <span>Service:</span>\r\n                    <span>{booking.service} - {booking.subservice}</span>\r\n                  </div>\r\n                  <div className=\"admin-booking-detail\">\r\n                    <span>Time:</span>\r\n                    <span>{booking.time_slot}</span>\r\n                  </div>\r\n                  <div className=\"admin-booking-detail\">\r\n                    <span>Car:</span>\r\n                    <span>{booking.model} ({booking.plate_number})</span>\r\n                  </div>\r\n                  <div className=\"admin-booking-detail\">\r\n                    <span>Price:</span>\r\n                    <span>${booking.price}</span>\r\n                  </div>\r\n                  \r\n                  {/* Status update actions */}\r\n                  <div className=\"admin-booking-actions\">\r\n                    <button \r\n                      className={`admin-status-btn work-started ${realStatus === 'work started' ? 'active' : ''}`}\r\n                      onClick={() => updateBookingStatus(booking.id, 'work started')}\r\n                      disabled={realStatus === 'work started' || realStatus === 'ready to collect' || realStatus === 'delivered' || realStatus === 'cancelled'}\r\n                    >\r\n                      Work Started\r\n                    </button>\r\n                    <button \r\n                      className={`admin-status-btn ready ${realStatus === 'ready to collect' ? 'active' : ''}`}\r\n                      onClick={() => updateBookingStatus(booking.id, 'ready to collect')}\r\n                      disabled={realStatus === 'ready to collect' || realStatus === 'delivered' || realStatus === 'cancelled' || !['work started', 'confirmed', 'pending'].includes(realStatus)}\r\n                    >\r\n                      Ready\r\n                    </button>\r\n                    <button \r\n                      className={`admin-status-btn delivered ${realStatus === 'delivered' ? 'active' : ''}`}\r\n                      onClick={() => updateBookingStatus(booking.id, 'delivered')}\r\n                      disabled={realStatus === 'delivered' || realStatus === 'cancelled' || realStatus !== 'ready to collect'}\r\n                    >\r\n                      Delivered\r\n                    </button>\r\n                    <button \r\n                      className={`admin-status-btn cancelled ${realStatus === 'cancelled' ? 'active' : ''}`}\r\n                      onClick={() => updateBookingStatus(booking.id, 'cancelled')}\r\n                      disabled={realStatus === 'delivered' || realStatus === 'cancelled'}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n            \r\n            {dateBookings.length === 0 && !loading && (\r\n              <div className=\"admin-no-data\">No bookings for this date</div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardBookings;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}