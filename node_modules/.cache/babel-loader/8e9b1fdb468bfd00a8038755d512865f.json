{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivashanker\\\\react\\\\car wash\\\\frontend\\\\src\\\\context\\\\UserContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nconst SOCKET_URL = 'http://localhost:5000';\nconst REFRESH_INTERVAL = 60000; // Refresh every 60 seconds as fallback\n\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Initialize socket connection\n  useEffect(() => {\n    const newSocket = io(SOCKET_URL);\n    newSocket.on('connect', () => {\n      console.log('Socket connected');\n      setIsConnected(true);\n\n      // Authenticate with token\n      const token = localStorage.getItem('token');\n      if (token) {\n        newSocket.emit('authenticate', token);\n      }\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n    newSocket.on('userData', data => {\n      console.log('Received updated user data');\n      setUserData(data);\n      localStorage.setItem('user', JSON.stringify(data));\n    });\n    newSocket.on('auth_error', error => {\n      console.error('Socket authentication error:', error);\n      // If authentication fails, logout\n      logout();\n    });\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Load user data from localStorage when app loads\n  useEffect(() => {\n    const storedUserData = localStorage.getItem('user');\n    if (storedUserData) {\n      try {\n        setUserData(JSON.parse(storedUserData));\n      } catch (error) {\n        console.error('Error parsing stored user data', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Reauthenticate socket when token changes\n  useEffect(() => {\n    if (socket && isConnected) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        socket.emit('authenticate', token);\n      }\n    }\n  }, [socket, isConnected]);\n\n  // Periodic polling as fallback for when socket isn't working\n  useEffect(() => {\n    let interval;\n    if (userData && !isConnected) {\n      // Only start polling if we have a user but socket is disconnected\n      interval = setInterval(() => {\n        refreshUserData();\n      }, REFRESH_INTERVAL);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [userData, isConnected]);\n\n  // Function to refresh user data from the server manually\n  const refreshUserData = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      // Use the refresh endpoint\n      const response = await axios.get('http://localhost:5000/api/user/refresh', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data) {\n        setUserData(response.data);\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n    } catch (error) {\n      console.error('Error refreshing user data:', error);\n      if (error.response && error.response.status === 401) {\n        logout();\n      }\n    }\n  }, []);\n\n  // Set user data and store in localStorage\n  const setUser = useCallback(data => {\n    setUserData(data);\n    if (data) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n  }, []);\n\n  // Logout: Remove user data and token from localStorage\n  const logout = useCallback(() => {\n    setUserData(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('adminToken');\n\n    // Disconnect socket on logout\n    if (socket) {\n      socket.disconnect();\n    }\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userData,\n      setUser,\n      refreshUserData,\n      // Keep manual refresh for components that need it\n      logout,\n      loading,\n      isConnected // Expose connection status to components\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"IwsfMGmDns7E8uDkO3LaKxGe8jk=\");\n_c = UserProvider;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","axios","io","jsxDEV","_jsxDEV","UserContext","SOCKET_URL","REFRESH_INTERVAL","UserProvider","children","_s","userData","setUserData","loading","setLoading","socket","setSocket","isConnected","setIsConnected","newSocket","on","console","log","token","localStorage","getItem","emit","data","setItem","JSON","stringify","error","logout","disconnect","storedUserData","parse","removeItem","interval","setInterval","refreshUserData","clearInterval","response","get","headers","Authorization","status","setUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/context/UserContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst UserContext = createContext();\r\nconst SOCKET_URL = 'http://localhost:5000';\r\nconst REFRESH_INTERVAL = 60000; // Refresh every 60 seconds as fallback\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    const newSocket = io(SOCKET_URL);\r\n    \r\n    newSocket.on('connect', () => {\r\n      console.log('Socket connected');\r\n      setIsConnected(true);\r\n      \r\n      // Authenticate with token\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        newSocket.emit('authenticate', token);\r\n      }\r\n    });\r\n    \r\n    newSocket.on('disconnect', () => {\r\n      console.log('Socket disconnected');\r\n      setIsConnected(false);\r\n    });\r\n    \r\n    newSocket.on('userData', (data) => {\r\n      console.log('Received updated user data');\r\n      setUserData(data);\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    });\r\n    \r\n    newSocket.on('auth_error', (error) => {\r\n      console.error('Socket authentication error:', error);\r\n      // If authentication fails, logout\r\n      logout();\r\n    });\r\n    \r\n    setSocket(newSocket);\r\n    \r\n    // Cleanup on unmount\r\n    return () => {\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n  \r\n  // Load user data from localStorage when app loads\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem('user');\r\n    if (storedUserData) {\r\n      try {\r\n        setUserData(JSON.parse(storedUserData));\r\n      } catch (error) {\r\n        console.error('Error parsing stored user data', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Reauthenticate socket when token changes\r\n  useEffect(() => {\r\n    if (socket && isConnected) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        socket.emit('authenticate', token);\r\n      }\r\n    }\r\n  }, [socket, isConnected]);\r\n\r\n  // Periodic polling as fallback for when socket isn't working\r\n  useEffect(() => {\r\n    let interval;\r\n    \r\n    if (userData && !isConnected) {\r\n      // Only start polling if we have a user but socket is disconnected\r\n      interval = setInterval(() => {\r\n        refreshUserData();\r\n      }, REFRESH_INTERVAL);\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [userData, isConnected]);\r\n\r\n  // Function to refresh user data from the server manually\r\n  const refreshUserData = useCallback(async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n    \r\n    try {\r\n      // Use the refresh endpoint\r\n      const response = await axios.get('http://localhost:5000/api/user/refresh', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      if (response.data) {\r\n        setUserData(response.data);\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing user data:', error);\r\n      if (error.response && error.response.status === 401) {\r\n        logout();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Set user data and store in localStorage\r\n  const setUser = useCallback((data) => {\r\n    setUserData(data);\r\n    if (data) {\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n  }, []);\r\n\r\n  // Logout: Remove user data and token from localStorage\r\n  const logout = useCallback(() => {\r\n    setUserData(null);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('adminToken');\r\n    \r\n    // Disconnect socket on logout\r\n    if (socket) {\r\n      socket.disconnect();\r\n    }\r\n  }, [socket]);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ \r\n      userData, \r\n      setUser, \r\n      refreshUserData, // Keep manual refresh for components that need it\r\n      logout, \r\n      loading,\r\n      isConnected // Expose connection status to components\r\n    }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}