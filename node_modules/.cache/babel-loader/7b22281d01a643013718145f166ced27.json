{"ast":null,"code":"import express from 'express';\nimport { queryDb } from '../config/db.js';\nimport verifyToken from '../middleware/verifyToken.js';\nconst router = express.Router();\n\n// Get all bookings for the logged in user\nrouter.get('/', verifyToken, async (req, res) => {\n  const userId = req.userId;\n  try {\n    const bookings = await queryDb('SELECT * FROM bookings WHERE user_id = ? ORDER BY booking_date DESC, booking_time DESC', [userId]);\n    res.json(bookings);\n  } catch (error) {\n    console.error('Error fetching bookings:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Create a new booking\nrouter.post('/', verifyToken, async (req, res) => {\n  const userId = req.userId;\n  const {\n    service_type,\n    car_id,\n    booking_date,\n    booking_time,\n    special_requests\n  } = req.body;\n  try {\n    // Validate required fields\n    if (!service_type || !car_id || !booking_date || !booking_time) {\n      return res.status(400).json({\n        message: 'Missing required booking information'\n      });\n    }\n\n    // Verify the car belongs to the user\n    const carCheck = await queryDb('SELECT * FROM cars WHERE id = ? AND user_id = ?', [car_id, userId]);\n    if (carCheck.length === 0) {\n      return res.status(403).json({\n        message: 'You can only book services for your own cars'\n      });\n    }\n\n    // Create the booking\n    const result = await queryDb(`INSERT INTO bookings (\n        user_id, car_id, service_type, booking_date, \n        booking_time, special_requests, status, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, 'pending', NOW())`, [userId, car_id, service_type, booking_date, booking_time, special_requests || null]);\n\n    // Add points to the user for making a booking\n    // First check if user has points record\n    const pointsCheck = await queryDb('SELECT * FROM loyalty_points WHERE user_id = ?', [userId]);\n    const pointsToAdd = 5; // Add 5 points for each booking\n\n    if (pointsCheck.length === 0) {\n      // Create new points record\n      await queryDb('INSERT INTO loyalty_points (user_id, points) VALUES (?, ?)', [userId, pointsToAdd]);\n    } else {\n      // Update existing points\n      await queryDb('UPDATE loyalty_points SET points = points + ? WHERE user_id = ?', [pointsToAdd, userId]);\n    }\n\n    // Get the newly created booking\n    const newBooking = await queryDb('SELECT * FROM bookings WHERE id = ?', [result.insertId]);\n    res.status(201).json({\n      message: 'Booking created successfully',\n      booking: newBooking[0],\n      pointsAdded: pointsToAdd\n    });\n  } catch (error) {\n    console.error('Error creating booking:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Cancel a booking\nrouter.delete('/:id', verifyToken, async (req, res) => {\n  const userId = req.userId;\n  const bookingId = req.params.id;\n  try {\n    // Check if booking exists and belongs to user\n    const bookingCheck = await queryDb('SELECT * FROM bookings WHERE id = ? AND user_id = ?', [bookingId, userId]);\n    if (bookingCheck.length === 0) {\n      return res.status(404).json({\n        message: 'Booking not found or not authorized'\n      });\n    }\n\n    // Check if the booking is already completed\n    if (bookingCheck[0].status === 'completed') {\n      return res.status(400).json({\n        message: 'Cannot cancel a completed booking'\n      });\n    }\n\n    // Update the booking status instead of deleting\n    await queryDb('UPDATE bookings SET status = \"cancelled\" WHERE id = ?', [bookingId]);\n    res.json({\n      message: 'Booking cancelled successfully',\n      bookingId\n    });\n  } catch (error) {\n    console.error('Error cancelling booking:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Update booking status (for admin use)\nrouter.put('/status/:id', verifyToken, async (req, res) => {\n  const bookingId = req.params.id;\n  const {\n    status\n  } = req.body;\n  try {\n    // Validate status\n    if (!['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'].includes(status)) {\n      return res.status(400).json({\n        message: 'Invalid status'\n      });\n    }\n\n    // Update booking status\n    await queryDb('UPDATE bookings SET status = ? WHERE id = ?', [status, bookingId]);\n\n    // If marking as completed, add additional points\n    if (status === 'completed') {\n      // Get the booking to find the user\n      const booking = await queryDb('SELECT user_id, service_type FROM bookings WHERE id = ?', [bookingId]);\n      if (booking.length > 0) {\n        const userId = booking[0].user_id;\n\n        // Add points based on service type\n        let pointsToAdd = 10; // Default points\n\n        // Adjust points based on service type (example)\n        if (booking[0].service_type === 'premium') {\n          pointsToAdd = 20;\n        } else if (booking[0].service_type === 'deluxe') {\n          pointsToAdd = 30;\n        }\n\n        // Update user's points\n        await queryDb('UPDATE loyalty_points SET points = points + ? WHERE user_id = ?', [pointsToAdd, userId]);\n      }\n    }\n    res.json({\n      message: `Booking status updated to ${status}`,\n      bookingId\n    });\n  } catch (error) {\n    console.error('Error updating booking status:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Get booking details\nrouter.get('/:id', verifyToken, async (req, res) => {\n  const userId = req.userId;\n  const bookingId = req.params.id;\n  try {\n    // Join with cars table to get car details\n    const booking = await queryDb(`SELECT b.*, c.plate_number, c.model, c.color \n       FROM bookings b\n       JOIN cars c ON b.car_id = c.id\n       WHERE b.id = ? AND b.user_id = ?`, [bookingId, userId]);\n    if (booking.length === 0) {\n      return res.status(404).json({\n        message: 'Booking not found or not authorized'\n      });\n    }\n    res.json(booking[0]);\n  } catch (error) {\n    console.error('Error fetching booking details:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// API endpoint to cancel a booking (using PUT instead of DELETE)\nrouter.put('/:id/cancel', verifyToken, async (req, res) => {\n  const userId = req.userId;\n  const bookingId = req.params.id;\n  try {\n    // Check if booking exists and belongs to user\n    const bookingCheck = await queryDb('SELECT * FROM bookings WHERE id = ? AND user_id = ?', [bookingId, userId]);\n    if (bookingCheck.length === 0) {\n      return res.status(404).json({\n        message: 'Booking not found or not authorized'\n      });\n    }\n\n    // Check if the booking is already completed\n    if (bookingCheck[0].status === 'completed') {\n      return res.status(400).json({\n        message: 'Cannot cancel a completed booking'\n      });\n    }\n\n    // Update the booking status to cancelled\n    await queryDb('UPDATE bookings SET status = \"cancelled\" WHERE id = ?', [bookingId]);\n\n    // Get the updated booking\n    const updatedBooking = await queryDb('SELECT * FROM bookings WHERE id = ?', [bookingId]);\n    res.json({\n      message: 'Booking cancelled successfully',\n      booking: updatedBooking[0]\n    });\n  } catch (error) {\n    console.error('Error cancelling booking:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\nexport default router;","map":{"version":3,"names":["express","queryDb","verifyToken","router","Router","get","req","res","userId","bookings","json","error","console","status","message","post","service_type","car_id","booking_date","booking_time","special_requests","body","carCheck","length","result","pointsCheck","pointsToAdd","newBooking","insertId","booking","pointsAdded","delete","bookingId","params","id","bookingCheck","put","includes","user_id","updatedBooking"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/components/Booking.jsx"],"sourcesContent":["import express from 'express';\r\nimport { queryDb } from '../config/db.js';\r\nimport verifyToken from '../middleware/verifyToken.js';\r\n\r\nconst router = express.Router();\r\n\r\n// Get all bookings for the logged in user\r\nrouter.get('/', verifyToken, async (req, res) => {\r\n  const userId = req.userId;\r\n  \r\n  try {\r\n    const bookings = await queryDb(\r\n      'SELECT * FROM bookings WHERE user_id = ? ORDER BY booking_date DESC, booking_time DESC',\r\n      [userId]\r\n    );\r\n    \r\n    res.json(bookings);\r\n  } catch (error) {\r\n    console.error('Error fetching bookings:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Create a new booking\r\nrouter.post('/', verifyToken, async (req, res) => {\r\n  const userId = req.userId;\r\n  const { \r\n    service_type, \r\n    car_id, \r\n    booking_date, \r\n    booking_time,\r\n    special_requests\r\n  } = req.body;\r\n  \r\n  try {\r\n    // Validate required fields\r\n    if (!service_type || !car_id || !booking_date || !booking_time) {\r\n      return res.status(400).json({ message: 'Missing required booking information' });\r\n    }\r\n    \r\n    // Verify the car belongs to the user\r\n    const carCheck = await queryDb(\r\n      'SELECT * FROM cars WHERE id = ? AND user_id = ?',\r\n      [car_id, userId]\r\n    );\r\n    \r\n    if (carCheck.length === 0) {\r\n      return res.status(403).json({ message: 'You can only book services for your own cars' });\r\n    }\r\n    \r\n    // Create the booking\r\n    const result = await queryDb(\r\n      `INSERT INTO bookings (\r\n        user_id, car_id, service_type, booking_date, \r\n        booking_time, special_requests, status, created_at\r\n      ) VALUES (?, ?, ?, ?, ?, ?, 'pending', NOW())`,\r\n      [userId, car_id, service_type, booking_date, booking_time, special_requests || null]\r\n    );\r\n    \r\n    // Add points to the user for making a booking\r\n    // First check if user has points record\r\n    const pointsCheck = await queryDb(\r\n      'SELECT * FROM loyalty_points WHERE user_id = ?',\r\n      [userId]\r\n    );\r\n    \r\n    const pointsToAdd = 5; // Add 5 points for each booking\r\n    \r\n    if (pointsCheck.length === 0) {\r\n      // Create new points record\r\n      await queryDb(\r\n        'INSERT INTO loyalty_points (user_id, points) VALUES (?, ?)',\r\n        [userId, pointsToAdd]\r\n      );\r\n    } else {\r\n      // Update existing points\r\n      await queryDb(\r\n        'UPDATE loyalty_points SET points = points + ? WHERE user_id = ?',\r\n        [pointsToAdd, userId]\r\n      );\r\n    }\r\n    \r\n    // Get the newly created booking\r\n    const newBooking = await queryDb(\r\n      'SELECT * FROM bookings WHERE id = ?',\r\n      [result.insertId]\r\n    );\r\n    \r\n    res.status(201).json({\r\n      message: 'Booking created successfully',\r\n      booking: newBooking[0],\r\n      pointsAdded: pointsToAdd\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating booking:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Cancel a booking\r\nrouter.delete('/:id', verifyToken, async (req, res) => {\r\n  const userId = req.userId;\r\n  const bookingId = req.params.id;\r\n  \r\n  try {\r\n    // Check if booking exists and belongs to user\r\n    const bookingCheck = await queryDb(\r\n      'SELECT * FROM bookings WHERE id = ? AND user_id = ?',\r\n      [bookingId, userId]\r\n    );\r\n    \r\n    if (bookingCheck.length === 0) {\r\n      return res.status(404).json({ message: 'Booking not found or not authorized' });\r\n    }\r\n    \r\n    // Check if the booking is already completed\r\n    if (bookingCheck[0].status === 'completed') {\r\n      return res.status(400).json({ message: 'Cannot cancel a completed booking' });\r\n    }\r\n    \r\n    // Update the booking status instead of deleting\r\n    await queryDb(\r\n      'UPDATE bookings SET status = \"cancelled\" WHERE id = ?',\r\n      [bookingId]\r\n    );\r\n    \r\n    res.json({ \r\n      message: 'Booking cancelled successfully',\r\n      bookingId\r\n    });\r\n  } catch (error) {\r\n    console.error('Error cancelling booking:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Update booking status (for admin use)\r\nrouter.put('/status/:id', verifyToken, async (req, res) => {\r\n  const bookingId = req.params.id;\r\n  const { status } = req.body;\r\n  \r\n  try {\r\n    // Validate status\r\n    if (!['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'].includes(status)) {\r\n      return res.status(400).json({ message: 'Invalid status' });\r\n    }\r\n    \r\n    // Update booking status\r\n    await queryDb(\r\n      'UPDATE bookings SET status = ? WHERE id = ?',\r\n      [status, bookingId]\r\n    );\r\n    \r\n    // If marking as completed, add additional points\r\n    if (status === 'completed') {\r\n      // Get the booking to find the user\r\n      const booking = await queryDb(\r\n        'SELECT user_id, service_type FROM bookings WHERE id = ?',\r\n        [bookingId]\r\n      );\r\n      \r\n      if (booking.length > 0) {\r\n        const userId = booking[0].user_id;\r\n        \r\n        // Add points based on service type\r\n        let pointsToAdd = 10; // Default points\r\n        \r\n        // Adjust points based on service type (example)\r\n        if (booking[0].service_type === 'premium') {\r\n          pointsToAdd = 20;\r\n        } else if (booking[0].service_type === 'deluxe') {\r\n          pointsToAdd = 30;\r\n        }\r\n        \r\n        // Update user's points\r\n        await queryDb(\r\n          'UPDATE loyalty_points SET points = points + ? WHERE user_id = ?',\r\n          [pointsToAdd, userId]\r\n        );\r\n      }\r\n    }\r\n    \r\n    res.json({ \r\n      message: `Booking status updated to ${status}`,\r\n      bookingId\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating booking status:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Get booking details\r\nrouter.get('/:id', verifyToken, async (req, res) => {\r\n  const userId = req.userId;\r\n  const bookingId = req.params.id;\r\n  \r\n  try {\r\n    // Join with cars table to get car details\r\n    const booking = await queryDb(\r\n      `SELECT b.*, c.plate_number, c.model, c.color \r\n       FROM bookings b\r\n       JOIN cars c ON b.car_id = c.id\r\n       WHERE b.id = ? AND b.user_id = ?`,\r\n      [bookingId, userId]\r\n    );\r\n    \r\n    if (booking.length === 0) {\r\n      return res.status(404).json({ message: 'Booking not found or not authorized' });\r\n    }\r\n    \r\n    res.json(booking[0]);\r\n  } catch (error) {\r\n    console.error('Error fetching booking details:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// API endpoint to cancel a booking (using PUT instead of DELETE)\r\nrouter.put('/:id/cancel', verifyToken, async (req, res) => {\r\n  const userId = req.userId;\r\n  const bookingId = req.params.id;\r\n  \r\n  try {\r\n    // Check if booking exists and belongs to user\r\n    const bookingCheck = await queryDb(\r\n      'SELECT * FROM bookings WHERE id = ? AND user_id = ?',\r\n      [bookingId, userId]\r\n    );\r\n    \r\n    if (bookingCheck.length === 0) {\r\n      return res.status(404).json({ message: 'Booking not found or not authorized' });\r\n    }\r\n    \r\n    // Check if the booking is already completed\r\n    if (bookingCheck[0].status === 'completed') {\r\n      return res.status(400).json({ message: 'Cannot cancel a completed booking' });\r\n    }\r\n    \r\n    // Update the booking status to cancelled\r\n    await queryDb(\r\n      'UPDATE bookings SET status = \"cancelled\" WHERE id = ?',\r\n      [bookingId]\r\n    );\r\n    \r\n    // Get the updated booking\r\n    const updatedBooking = await queryDb(\r\n      'SELECT * FROM bookings WHERE id = ?',\r\n      [bookingId]\r\n    );\r\n    \r\n    res.json({\r\n      message: 'Booking cancelled successfully',\r\n      booking: updatedBooking[0]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error cancelling booking:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\nexport default router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}