{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivashanker\\\\react\\\\car wash\\\\frontend\\\\src\\\\context\\\\UserContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user data from localStorage when app loads\n  useEffect(() => {\n    const storedUserData = localStorage.getItem('user');\n    if (storedUserData) {\n      try {\n        setUserData(JSON.parse(storedUserData));\n      } catch (error) {\n        console.error('Error parsing stored user data', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Simpler manual refresh function that's more reliable\n  const refreshUserData = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await axios.get('http://localhost:5000/api/user/refresh', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data) {\n        // Update local state and localStorage\n        setUserData(response.data);\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Error refreshing user data:', error);\n      // Only logout on 401 Unauthorized errors\n      if (error.response && error.response.status === 401) {\n        logout();\n      }\n    }\n  }, []);\n\n  // Set up automatic periodic refresh\n  useEffect(() => {\n    let interval;\n    if (userData) {\n      // Refresh every 30 seconds if user is logged in\n      interval = setInterval(() => {\n        refreshUserData();\n      }, 30000); // 30 seconds\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [userData, refreshUserData]);\n\n  // Set user data and store in localStorage\n  const setUser = useCallback(data => {\n    setUserData(data);\n    if (data) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n  }, []);\n\n  // Update specific user data fields\n  const updateUserData = useCallback(updatedFields => {\n    if (userData) {\n      const updated = {\n        ...userData,\n        ...updatedFields\n      };\n      setUserData(updated);\n      localStorage.setItem('user', JSON.stringify(updated));\n    }\n  }, [userData]);\n\n  // Logout: Remove user data and token from localStorage\n  const logout = useCallback(() => {\n    setUserData(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('adminToken');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userData,\n      setUser,\n      updateUserData,\n      refreshUserData,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"Q1PE71XX4Dx6bGxIRubNvOJ+Zdc=\");\n_c = UserProvider;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","userData","setUserData","loading","setLoading","storedUserData","localStorage","getItem","JSON","parse","error","console","removeItem","refreshUserData","token","response","get","headers","Authorization","data","setItem","stringify","status","logout","interval","setInterval","clearInterval","setUser","updateUserData","updatedFields","updated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shivashanker/react/car wash/frontend/src/context/UserContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the context\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Load user data from localStorage when app loads\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem('user');\r\n    if (storedUserData) {\r\n      try {\r\n        setUserData(JSON.parse(storedUserData));\r\n      } catch (error) {\r\n        console.error('Error parsing stored user data', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Simpler manual refresh function that's more reliable\r\n  const refreshUserData = useCallback(async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n    \r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/user/refresh', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      if (response.data) {\r\n        // Update local state and localStorage\r\n        setUserData(response.data);\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing user data:', error);\r\n      // Only logout on 401 Unauthorized errors\r\n      if (error.response && error.response.status === 401) {\r\n        logout();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Set up automatic periodic refresh\r\n  useEffect(() => {\r\n    let interval;\r\n    \r\n    if (userData) {\r\n      // Refresh every 30 seconds if user is logged in\r\n      interval = setInterval(() => {\r\n        refreshUserData();\r\n      }, 30000); // 30 seconds\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [userData, refreshUserData]);\r\n\r\n  // Set user data and store in localStorage\r\n  const setUser = useCallback((data) => {\r\n    setUserData(data);\r\n    if (data) {\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n  }, []);\r\n\r\n  // Update specific user data fields\r\n  const updateUserData = useCallback((updatedFields) => {\r\n    if (userData) {\r\n      const updated = { ...userData, ...updatedFields };\r\n      setUserData(updated);\r\n      localStorage.setItem('user', JSON.stringify(updated));\r\n    }\r\n  }, [userData]);\r\n\r\n  // Logout: Remove user data and token from localStorage\r\n  const logout = useCallback(() => {\r\n    setUserData(null);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('adminToken');\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ \r\n      userData, \r\n      setUser, \r\n      updateUserData,\r\n      refreshUserData,\r\n      logout, \r\n      loading\r\n    }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACnD,IAAIF,cAAc,EAAE;MAClB,IAAI;QACFH,WAAW,CAACM,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDJ,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;MACjC;IACF;IACAR,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,eAAe,GAAGpB,WAAW,CAAC,YAAY;IAC9C,MAAMqB,KAAK,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACO,KAAK,EAAE;IAEZ,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,wCAAwC,EAAE;QACzEC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAC9C,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACI,IAAI,EAAE;QACjB;QACAjB,WAAW,CAACa,QAAQ,CAACI,IAAI,CAAC;QAC1Bb,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACN,QAAQ,CAACI,IAAI,CAAC,CAAC;QAC3D,OAAOJ,QAAQ,CAACI,IAAI;MACtB;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD;MACA,IAAIA,KAAK,CAACK,QAAQ,IAAIL,KAAK,CAACK,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QACnDC,MAAM,CAAC,CAAC;MACV;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA/B,SAAS,CAAC,MAAM;IACd,IAAIgC,QAAQ;IAEZ,IAAIvB,QAAQ,EAAE;MACZ;MACAuB,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BZ,eAAe,CAAC,CAAC;MACnB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IACb;IAEA,OAAO,MAAM;MACX,IAAIW,QAAQ,EAAEE,aAAa,CAACF,QAAQ,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,CAACvB,QAAQ,EAAEY,eAAe,CAAC,CAAC;;EAE/B;EACA,MAAMc,OAAO,GAAGlC,WAAW,CAAE0B,IAAI,IAAK;IACpCjB,WAAW,CAACiB,IAAI,CAAC;IACjB,IAAIA,IAAI,EAAE;MACRb,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACF,IAAI,CAAC,CAAC;IACpD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,cAAc,GAAGnC,WAAW,CAAEoC,aAAa,IAAK;IACpD,IAAI5B,QAAQ,EAAE;MACZ,MAAM6B,OAAO,GAAG;QAAE,GAAG7B,QAAQ;QAAE,GAAG4B;MAAc,CAAC;MACjD3B,WAAW,CAAC4B,OAAO,CAAC;MACpBxB,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACS,OAAO,CAAC,CAAC;IACvD;EACF,CAAC,EAAE,CAAC7B,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMsB,MAAM,GAAG9B,WAAW,CAAC,MAAM;IAC/BS,WAAW,CAAC,IAAI,CAAC;IACjBI,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/BN,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA,CAACC,WAAW,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAC3B/B,QAAQ;MACR0B,OAAO;MACPC,cAAc;MACdf,eAAe;MACfU,MAAM;MACNpB;IACF,CAAE;IAAAJ,QAAA,EACCA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpC,EAAA,CAhGWF,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAkGzB,eAAeD,WAAW;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}